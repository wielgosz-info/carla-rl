# Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

# CORL experiment set.
#
# -------------------------------------------------------------------------------
#
# This file is intended to provide the same functions as
# https://github.com/carla-simulator/driving-benchmarks/blob/master/version084/driving_benchmarks/corl2017/corl_2017.py
# but working with CARLA 0.9.11 and gym

from carla import WeatherParameters

from gym_carla.benchmark_tools.experiment import Experiment
from gym_carla.benchmark_tools.experiment_suite import ExperimentSuite


class CoRL2017(ExperimentSuite):

    @property
    def train_weathers(self):
        return [
            WeatherParameters.ClearNoon,  # 1,
            WeatherParameters.WetNoon,  # 3,
            WeatherParameters.HardRainNoon,  # 6,
            WeatherParameters.ClearSunset  # 8
        ]

    @property
    def test_weathers(self):
        return [
            WeatherParameters.WetCloudyNoon,  # 4,
            WeatherParameters.SoftRainSunset  # 14
        ]

    def _poses_town01(self):
        """
        Each matrix is a new task. We have all the four tasks

        """

        def _poses_straight():
            # return [[36, 40], [39, 35], [110, 114], [7, 3], [0, 4],
            #         [68, 50], [61, 59], [47, 64], [147, 90], [33, 87],
            #         [26, 19], [80, 76], [45, 49], [55, 44], [29, 107],
            #         [95, 104], [84, 34], [53, 67], [22, 17], [91, 148],
            #         [20, 107], [78, 70], [95, 102], [68, 44], [45, 69]]
            return [[295.73978, 328.59978, 22],
                    [320.38478, 287.52477999999996, 22],
                    [903.6497800000001, 936.5097800000001, 22],
                    [57.504780000000004, 24.644780000000004, 22],
                    [-0.00021999999999877673, 32.85978, 22],
                    [558.61978, 410.74978, 22],
                    [501.11477999999994, 484.68478, 22],
                    [386.10478, 525.7597800000001, 22],
                    [1207.6047800000001, 739.34978, 22],
                    [271.09477999999996, 714.70478, 22],
                    [213.58978000000002, 156.08478000000002, 22],
                    [657.19978, 624.33978, 22],
                    [369.67478, 402.53478, 22],
                    [451.82478, 361.45977999999997, 22],
                    [238.23478, 879.0047800000001, 22],
                    [780.42478, 854.35978, 22],
                    [690.05978, 279.30978, 22],
                    [435.39477999999997, 550.4047800000001, 22],
                    [180.72978, 139.65478000000002, 22],
                    [747.56478, 1215.81978, 22],
                    [164.29978, 879.0047800000001, 22],
                    [640.7697800000001, 575.04978, 22],
                    [780.42478, 837.92978, 22],
                    [558.61978, 361.45977999999997, 22],
                    [369.67478, 566.83478, 22]]

        def _poses_one_curve():
            # return [[138, 17], [47, 16], [26, 9], [42, 49], [140, 124],
            #         [85, 98], [65, 133], [137, 51], [76, 66], [46, 39],
            #         [40, 60], [0, 29], [4, 129], [121, 140], [2, 129],
            #         [78, 44], [68, 85], [41, 102], [95, 70], [68, 129],
            #         [84, 69], [47, 79], [110, 15], [130, 17], [0, 17]]
            return [[1133.66978, 139.65478000000002, 22],
                    [386.10478, 131.43978, 22],
                    [213.58978000000002, 73.93477999999999, 22],
                    [345.02977999999996, 402.53478, 22],
                    [1150.09978, 1018.65978, 22],
                    [698.2747800000001, 805.06978, 22],
                    [533.97478, 1092.5947800000001, 22],
                    [1125.45478, 418.96477999999996, 22],
                    [624.33978, 542.18978, 22],
                    [377.88978, 320.38478, 22],
                    [328.59978, 492.89977999999996, 22],
                    [0, 238.23478, 22],
                    [32.85978, 1059.73478, 22],
                    [994.0147800000001, 1150.09978, 22],
                    [16.42978, 1059.73478, 22],
                    [640.7697800000001, 361.45977999999997, 22],
                    [558.61978, 698.2747800000001, 22],
                    [336.81478, 837.92978, 22],
                    [780.42478, 575.04978, 22],
                    [558.61978, 1059.73478, 22],
                    [690.05978, 566.83478, 22],
                    [386.10478, 648.98478, 22],
                    [903.6497800000001, 123.22478000000001, 22],
                    [1067.9497800000001, 139.65478000000002, 22],
                    [0, 139.65478000000002, 22]]

        def _poses_navigation():
            # return [[105, 29], [27, 130], [102, 87], [132, 27], [24, 44],
            #         [96, 26], [34, 67], [28, 1], [140, 134], [105, 9],
            #         [148, 129], [65, 18], [21, 16], [147, 97], [42, 51],
            #         [30, 41], [18, 107], [69, 45], [102, 95], [18, 145],
            #         [111, 64], [79, 45], [84, 69], [73, 31], [37, 81]]
            return [[862.57478, 238.23478, 22],
                    [221.80478000000002, 1067.9497800000001, 22],
                    [837.92978, 714.70478, 22],
                    [1084.37978, 221.80478000000002, 22],
                    [197.15978, 361.45977999999997, 22],
                    [788.6397800000001, 213.58978000000002, 22],
                    [279.30978, 550.4047800000001, 22],
                    [230.01978, 8.214780000000001, 22],
                    [1150.09978, 1100.80978, 22],
                    [862.57478, 73.93477999999999, 22],
                    [1215.81978, 1059.73478, 22],
                    [533.97478, 147.86978000000002, 22],
                    [172.51478, 131.43978, 22],
                    [1207.6047800000001, 796.85478, 22],
                    [345.02977999999996, 418.96477999999996, 22],
                    [246.44978, 336.81478, 22],
                    [147.86978000000002, 879.0047800000001, 22],
                    [566.83478, 369.67478, 22],
                    [837.92978, 780.42478, 22],
                    [147.86978000000002, 1191.17478, 22],
                    [911.86478, 525.7597800000001, 22],
                    [648.98478, 369.67478, 22],
                    [690.05978, 566.83478, 22],
                    [599.69478, 254.66478000000004, 22],
                    [303.95477999999997, 665.4147800000001, 22]]

        return [_poses_straight(),
                _poses_one_curve(),
                _poses_navigation(),
                _poses_navigation()]

    def _poses_town02(self):

        def _poses_straight():
            # return [[38, 34], [4, 2], [12, 10], [62, 55], [43, 47],
            #         [64, 66], [78, 76], [59, 57], [61, 18], [35, 39],
            #         [12, 8], [0, 18], [75, 68], [54, 60], [45, 49],
            #         [46, 42], [53, 46], [80, 29], [65, 63], [0, 81],
            #         [54, 63], [51, 42], [16, 19], [17, 26], [77, 68]]
            # TODO: I'm pretty sure there shouldn't be any negative numbers...
            return [[306.72978, 386.78978, 22],
                    [27.41978, 123.90978000000001, 22],
                    [93.13978, 189.62977999999998, 22],
                    [503.88978, 559.3047799999999, 22],
                    [347.80478, 493.58478, 22],
                    [520.31978, 649.6697800000001, 22],
                    [635.32978, 731.81978, 22],
                    [479.24478, 575.73478, 22],
                    [495.67477999999994, 255.34978, 22],
                    [282.08477999999997, 427.86478, 22],
                    [93.13978, 173.19978000000003, 22],
                    [-5.440219999999999, 255.34978, 22],
                    [610.6847799999999, 666.09978, 22],
                    [438.16978, 600.37978, 22],
                    [364.23478, 510.01478000000003, 22],
                    [372.44978, 452.50978, 22],
                    [429.95477999999997, 485.36978, 22],
                    [651.75978, 345.71478, 22],
                    [528.53478, 625.0247800000001, 22],
                    [-5.440219999999999, 772.8947800000001, 22],
                    [438.16978, 625.0247800000001, 22],
                    [413.52477999999996, 452.50978, 22],
                    [125.99978000000002, 263.56478000000004, 22],
                    [134.21478000000002, 321.06978000000004, 22],
                    [627.11478, 666.09978, 22]]

        def _poses_one_curve():
            # return [[37, 76], [8, 24], [60, 69], [38, 10], [21, 1],
            #         [58, 71], [74, 32], [44, 0], [71, 16], [14, 24],
            #         [34, 11], [43, 14], [75, 16], [80, 21], [3, 23],
            #         [75, 59], [50, 47], [11, 19], [77, 34], [79, 25],
            #         [40, 63], [58, 76], [79, 55], [16, 61], [27, 11]]
            return [[298.51478, 731.81978, 22],
                    [60.27978000000002, 304.63978000000003, 22],
                    [487.45977999999997, 674.31478, 22],
                    [306.72978, 189.62977999999998, 22],
                    [167.07478, 115.69478000000001, 22],
                    [471.02977999999996, 690.7447800000001, 22],
                    [602.46978, 370.35978, 22],
                    [356.01977999999997, 107.47978, 22],
                    [577.82478, 238.91978, 22],
                    [109.56978000000001, 304.63978000000003, 22],
                    [273.86978, 197.84478000000001, 22],
                    [347.80478, 222.48978, 22],
                    [610.6847799999999, 238.91978, 22],
                    [651.75978, 279.99478, 22],
                    [19.204780000000003, 296.42478, 22],
                    [610.6847799999999, 592.16478, 22],
                    [405.30978, 493.58478, 22],
                    [84.92478, 263.56478000000004, 22],
                    [627.11478, 386.78978, 22],
                    [643.54478, 312.85478, 22],
                    [323.15978, 625.0247800000001, 22],
                    [471.02977999999996, 731.81978, 22],
                    [643.54478, 559.3047799999999, 22],
                    [125.99978000000002, 608.5947799999999, 22],
                    [216.36478000000002, 197.84478000000001, 22]]

        def _poses_navigation():
            # return [[19, 66], [79, 14], [19, 57], [23, 1],
            #         [53, 76], [42, 13], [31, 71], [33, 5],
            #         [54, 30], [10, 61], [66, 3], [27, 12],
            #         [79, 19], [2, 29], [16, 14], [5, 57],
            #         [70, 73], [46, 67], [57, 50], [61, 49], [21, 12],
            #         [51, 81], [77, 68], [56, 65], [43, 54]]
            return [[150.64478000000003, 649.6697800000001, 22],
                    [643.54478, 222.48978, 22],
                    [150.64478000000003, 575.73478, 22],
                    [183.50478, 115.69478000000001, 22],
                    [429.95477999999997, 731.81978, 22],
                    [339.58977999999996, 214.27478000000002, 22],
                    [249.22478000000004, 690.7447800000001, 22],
                    [265.65477999999996, 148.55478, 22],
                    [438.16978, 353.92978, 22],
                    [76.70978, 608.5947799999999, 22],
                    [536.74978, 132.12478000000002, 22],
                    [216.36478000000002, 206.05978, 22],
                    [643.54478, 263.56478000000004, 22],
                    [10.98978, 345.71478, 22],
                    [125.99978000000002, 222.48978, 22],
                    [35.634780000000006, 575.73478, 22],
                    [569.60978, 707.17478, 22],
                    [372.44978, 657.8847800000001, 22],
                    [462.81478, 518.22978, 22],
                    [495.67477999999994, 510.01478000000003, 22],
                    [167.07478, 206.05978, 22],
                    [413.52477999999996, 772.8947800000001, 22],
                    [627.11478, 666.09978, 22],
                    [454.59978, 641.45478, 22],
                    [347.80478, 551.08978, 22]]

        return [_poses_straight(),
                _poses_one_curve(),
                _poses_navigation(),
                _poses_navigation()
                ]

    def build_experiments(self):
        """
        Creates the whole set of experiment objects,
        The experiments created depend on the selected Town.
        """

        if self._city_name == 'Town01':
            poses_tasks = self._poses_town01()
            vehicles_tasks = [0, 0, 0, 20]
            pedestrians_tasks = [0, 0, 0, 50]
        else:
            poses_tasks = self._poses_town02()
            vehicles_tasks = [0, 0, 0, 15]
            pedestrians_tasks = [0, 0, 0, 50]

        experiments_vector = []

        for weather in self.weathers:
            for iteration in range(len(poses_tasks)):
                poses = poses_tasks[iteration]
                vehicles = vehicles_tasks[iteration]
                pedestrians = pedestrians_tasks[iteration]

                experiment = Experiment()
                experiment.set(
                    map_name=self._city_name,
                    weather=weather,
                    poses=poses,
                    task=iteration,
                    number_of_vehicles=vehicles,
                    number_of_pedestrians=pedestrians,
                    repetitions=1
                )
                experiments_vector.append(experiment)

        return experiments_vector
